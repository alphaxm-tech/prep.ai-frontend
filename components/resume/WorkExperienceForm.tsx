// components/resume/WorkExperienceForm.tsx
import React, { useEffect, useRef, useState } from "react";
import { SparklesIcon } from "@heroicons/react/24/outline";

export interface WorkExperience {
  company: string;
  role: string;
  duration: string;
  description: string;
  logo: string;
}

export default function WorkExperienceForm({
  experiences,
  setExperiences,
}: {
  experiences: WorkExperience[];
  setExperiences: (v: WorkExperience[]) => void;
}) {
  const [newExp, setNewExp] = useState<WorkExperience>({
    company: "",
    role: "",
    duration: "",
    description: "",
    logo: "",
  });

  const [editIndex, setEditIndex] = useState<number | null>(null);
  const [editExp, setEditExp] = useState<WorkExperience | null>(null);

  const [showDropdown, setShowDropdown] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handler = (e: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(e.target as Node)
      ) {
        setShowDropdown(false);
      }
    };
    document.addEventListener("mousedown", handler);
    return () => document.removeEventListener("mousedown", handler);
  }, []);

  const handleNewChange = (field: keyof WorkExperience, value: string) => {
    setNewExp({ ...newExp, [field]: value });
  };

  const addExperience = () => {
    if (
      !newExp.company ||
      !newExp.role ||
      !newExp.duration ||
      !newExp.description
    ) {
      return;
    }
    setExperiences([...experiences, newExp]);
    setNewExp({
      company: "",
      role: "",
      duration: "",
      description: "",
      logo: "",
    });
  };

  const startEdit = (index: number) => {
    setEditIndex(index);
    setEditExp({ ...experiences[index] });
  };

  const saveEdit = () => {
    if (editExp && editIndex !== null) {
      const updated = [...experiences];
      updated[editIndex] = editExp;
      setExperiences(updated);
      setEditIndex(null);
      setEditExp(null);
    }
  };

  const cancelEdit = () => {
    setEditIndex(null);
    setEditExp(null);
  };

  const deleteExperience = (index: number) => {
    setExperiences(experiences.filter((_, i) => i !== index));
  };

  const inputClasses =
    "px-3 py-2 border border-gray-200 text-sm font-medium bg-white rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-200 focus:border-yellow-300";

  const handleAIEnhance = (
    setter: (val: string) => void,
    value: string,
    type: string
  ) => {
    let enhanced = value;
    switch (type) {
      case "polish":
        enhanced = value ? `${value} ‚Äî polished by AI ‚ú®` : "Generated by AI.";
        break;
      case "concise":
        enhanced = value
          ? `${value.slice(0, 50)}... (concise)`
          : "Concise text.";
        break;
      case "technical":
        enhanced = value
          ? `${value} ‚Äî with more technical depth üîß`
          : "Technical version by AI.";
        break;
      case "recruiter":
        enhanced = value
          ? `${value} ‚Äî recruiter-friendly üè¢`
          : "Recruiter-friendly version.";
        break;
    }
    setter(enhanced);
    setShowDropdown(false);
  };

  return (
    <div>
      {/* --- Add New Work Experience Form --- */}
      <div className="p-4 bg-white rounded-lg shadow flex flex-col gap-3 mb-6">
        {/* Row 1: Company, Role, Duration */}
        <div className="flex items-end gap-3">
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Company
            </label>
            <input
              type="text"
              value={newExp.company}
              onChange={(e) => handleNewChange("company", e.target.value)}
              className={`w-full ${inputClasses}`}
              placeholder="Google, Microsoft"
            />
          </div>

          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Role
            </label>
            <input
              type="text"
              value={newExp.role}
              onChange={(e) => handleNewChange("role", e.target.value)}
              className={`w-full ${inputClasses}`}
              placeholder="Fullstack developer"
            />
          </div>

          <div className="w-40">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Duration
            </label>
            <input
              type="text"
              value={newExp.duration}
              onChange={(e) => handleNewChange("duration", e.target.value)}
              className={`w-full ${inputClasses}`}
              placeholder="2022-2024"
            />
          </div>

          <button
            onClick={addExperience}
            aria-label="Add experience"
            title="Add experience"
            className="flex items-center justify-center w-8 h-8 rounded-full bg-yellow-300 text-white text-xl shadow-sm hover:bg-yellow-400 focus:outline-none shrink-0 mb-1"
          >
            +
          </button>
        </div>

        {/* Row 2: Description with AI Enhance */}
        <div>
          <div className="flex items-center justify-between mb-1">
            <label className="block text-sm font-medium text-gray-700">
              Work Experience / Projects
            </label>

            <div className="relative" ref={dropdownRef}>
              <button
                onClick={() => setShowDropdown((prev) => !prev)}
                className="flex items-center gap-1 px-2 py-1 mb-1 rounded-md text-xs font-medium text-gray-800 bg-gradient-to-r from-purple-100 via-pink-100 to-orange-100 shadow-sm hover:shadow-md transition"
              >
                <SparklesIcon className="w-3 h-3 text-pink-500" /> AI Enhance
              </button>

              {showDropdown && (
                <div className="absolute right-0 mt-1 w-44 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                  <button
                    onClick={() =>
                      handleAIEnhance(
                        (val) => setNewExp({ ...newExp, description: val }),
                        newExp.description,
                        "polish"
                      )
                    }
                    className="block w-full px-3 py-2 text-left text-sm hover:bg-gray-50"
                  >
                    ‚ú® Polish
                  </button>
                  <button
                    onClick={() =>
                      handleAIEnhance(
                        (val) => setNewExp({ ...newExp, description: val }),
                        newExp.description,
                        "concise"
                      )
                    }
                    className="block w-full px-3 py-2 text-left text-sm hover:bg-gray-50"
                  >
                    ‚úÇÔ∏è Make Concise
                  </button>
                  <button
                    onClick={() =>
                      handleAIEnhance(
                        (val) => setNewExp({ ...newExp, description: val }),
                        newExp.description,
                        "technical"
                      )
                    }
                    className="block w-full px-3 py-2 text-left text-sm hover:bg-gray-50"
                  >
                    üîß More Technical
                  </button>
                  <button
                    onClick={() =>
                      handleAIEnhance(
                        (val) => setNewExp({ ...newExp, description: val }),
                        newExp.description,
                        "recruiter"
                      )
                    }
                    className="block w-full px-3 py-2 text-left text-sm hover:bg-gray-50"
                  >
                    üè¢ Recruiter-Friendly
                  </button>
                </div>
              )}
            </div>
          </div>

          <textarea
            value={newExp.description}
            onChange={(e) => handleNewChange("description", e.target.value)}
            rows={3}
            placeholder="Describe your work (50‚Äì70 words)"
            className={`w-full ${inputClasses}`}
          />
        </div>

        {/* Row 3: Logo */}
        {/* <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Company Logo
          </label>
          <input
            type="text"
            value={newExp.logo}
            onChange={(e) => handleNewChange("logo", e.target.value)}
            className={`w-full ${inputClasses}`}
            placeholder="https://example.com/logo.png"
          />
        </div> */}
      </div>

      {/* --- List of Added Experiences --- */}
      <div className="space-y-4">
        {experiences.map((exp, index) => (
          <div
            key={index}
            className="p-4 bg-white rounded-lg shadow hover:shadow-md transition border border-gray-100 flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4"
          >
            {editIndex === index && editExp ? (
              <div className="flex-1 flex flex-col gap-3">
                <div className="flex gap-3">
                  <input
                    type="text"
                    value={editExp.company}
                    onChange={(e) =>
                      setEditExp({ ...editExp, company: e.target.value })
                    }
                    className={`flex-1 ${inputClasses}`}
                  />
                  <input
                    type="text"
                    value={editExp.role}
                    onChange={(e) =>
                      setEditExp({ ...editExp, role: e.target.value })
                    }
                    className={`flex-1 ${inputClasses}`}
                  />
                  <input
                    type="text"
                    value={editExp.duration}
                    onChange={(e) =>
                      setEditExp({ ...editExp, duration: e.target.value })
                    }
                    className={`w-40 ${inputClasses}`}
                  />
                </div>
                <textarea
                  value={editExp.description}
                  onChange={(e) =>
                    setEditExp({ ...editExp, description: e.target.value })
                  }
                  rows={3}
                  className={`w-full ${inputClasses}`}
                />
                <input
                  type="text"
                  value={editExp.logo}
                  onChange={(e) =>
                    setEditExp({ ...editExp, logo: e.target.value })
                  }
                  className={`w-full ${inputClasses}`}
                />
              </div>
            ) : (
              <div className="flex-1 flex items-start gap-3">
                {exp.logo && (
                  <img
                    src={exp.logo}
                    alt={exp.company}
                    className="w-12 h-12 object-contain rounded border border-gray-200"
                  />
                )}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    üëî {exp.role}
                  </h3>
                  <p className="text-sm font-medium text-gray-700">
                    üè¢ {exp.company}
                  </p>
                  <p className="text-xs text-gray-500">‚è≥ {exp.duration}</p>
                  <p className="mt-2 text-sm text-gray-600 leading-snug">
                    üìÑ {exp.description}
                  </p>
                </div>
              </div>
            )}

            <div className="flex items-center gap-2">
              {editIndex === index ? (
                <>
                  <button
                    onClick={saveEdit}
                    className="px-3 py-1 text-sm rounded-md bg-yellow-300 text-white hover:bg-yellow-400"
                  >
                    Save
                  </button>
                  <button
                    onClick={cancelEdit}
                    className="px-3 py-1 text-sm rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300"
                  >
                    Cancel
                  </button>
                </>
              ) : (
                <>
                  <button
                    onClick={() => startEdit(index)}
                    className="px-3 py-1 text-sm rounded-md bg-yellow-100 text-yellow-700 hover:bg-yellow-200"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => deleteExperience(index)}
                    className="px-3 py-1 text-sm rounded-md bg-red-100 text-red-700 hover:bg-red-200"
                  >
                    Delete
                  </button>
                </>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
